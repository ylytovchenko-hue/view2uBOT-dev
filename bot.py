import os
import asyncio
import json
import logging
import base64
from io import BytesIO
import time
import socket
from typing import Any, Dict, List, Optional

import requests
from aiotg import Bot, Chat
from aiohttp import web
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload, MediaIoBaseDownload
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# ---------------- –õ–û–ì–£–í–ê–ù–ù–Ø ----------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("tg-bot")

# ---------------- –û–¢–û–ß–ï–ù–ù–Ø ----------------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
API_SECRET = os.environ.get("API_SECRET")
GOOGLE_DRIVE_FILE_ID = os.environ.get("GOOGLE_DRIVE_FILE_ID")
GOOGLE_SERVICE_ACCOUNT_EMAIL = os.environ.get("GOOGLE_SERVICE_ACCOUNT_EMAIL")
GOOGLE_PRIVATE_KEY = os.environ.get("GOOGLE_PRIVATE_KEY")
PORT = int(os.environ.get("PORT", 8080))
FORCE_IPV4 = os.environ.get("FORCE_IPV4", "true").lower() in ("1", "true", "yes")

# ---------------- IPv4 ONLY –•–ê–ö ----------------
def force_ipv4_only():
    """
    –ù–∞ –¥–µ—è–∫–∏—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö (Render, Railway, —ñ–Ω.) egress –ø–æ IPv6 –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.
    Telegram —á–∞—Å—Ç–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –≤ IPv6. –•–∞–∫ –Ω–∏–∂—á–µ –∑–º—É—à—É—î socket –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ IPv4.
    –ú–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –∑–º—ñ–Ω–Ω–æ—é FORCE_IPV4=false
    """
    if not FORCE_IPV4:
        logger.info("FORCE_IPV4=false ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –º–µ—Ä–µ–∂–µ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
        return

    logger.warning("–£–í–ê–ì–ê: –í–º–∏–∫–∞—é IPv4-only —Ä–µ–∂–∏–º –¥–ª—è socket.getaddrinfo (FORCE_IPV4=true).")
    _orig_getaddrinfo = socket.getaddrinfo

    def _v4_only_getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        return _orig_getaddrinfo(host, port, socket.AF_INET, type, proto, flags)

    socket.getaddrinfo = _v4_only_getaddrinfo

force_ipv4_only()

# ---------------- Google Drive ----------------
SCOPES = ['https://www.googleapis.com/auth/drive']

def _build_drive_client():
    if not all([GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY]):
        raise ValueError("GOOGLE_SERVICE_ACCOUNT_EMAIL —Ç–∞ GOOGLE_PRIVATE_KEY –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ.")
    creds_dict = {
        "type": "service_account",
        "project_id": GOOGLE_SERVICE_ACCOUNT_EMAIL.split('@')[1].split('.')[0],
        "private_key_id": "",
        "private_key": GOOGLE_PRIVATE_KEY.replace('\\n', '\n'),
        "client_email": GOOGLE_SERVICE_ACCOUNT_EMAIL,
        "client_id": "",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": f"https://www.googleapis.com/robot/v1/metadata/x509/{GOOGLE_SERVICE_ACCOUNT_EMAIL.replace('@', '%40')}"
    }
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    return build('drive', 'v3', credentials=creds)

try:
    drive_service = _build_drive_client()
except Exception as e:
    logger.critical(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Google: {e}")
    raise SystemExit(1)

db_lock = asyncio.Lock()

async def read_db() -> Optional[Dict[str, Any]]:
    async with db_lock:
        try:
            request = drive_service.files().get_media(fileId=GOOGLE_DRIVE_FILE_ID)
            fh = BytesIO()
            downloader = MediaIoBaseDownload(fh, request)
            done = False
            while not done:
                status, done = downloader.next_chunk()
            fh.seek(0)
            raw = fh.read().decode('utf-8') if fh.getbuffer().nbytes else ""
            return json.loads(raw) if raw else {}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ Google Drive: {e}")
            return None

async def write_db(data: Dict[str, Any]) -> bool:
    async with db_lock:
        try:
            fh = BytesIO(json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8'))
            media = MediaIoBaseUpload(fh, mimetype='application/json', resumable=True)
            drive_service.files().update(fileId=GOOGLE_DRIVE_FILE_ID, media_body=media).execute()
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google Drive: {e}")
            return False

def find_user_by_chat_id(db_data: Dict[str, Any], chat_id: int) -> Optional[Dict[str, Any]]:
    for user in db_data.get("users", []):
        binding = user.get("telegramBinding")
        if binding and binding.get("chatId") == chat_id:
            return user
    return None

# ---------------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê ----------------
if not all([BOT_TOKEN, API_SECRET, GOOGLE_DRIVE_FILE_ID, GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY]):
    logger.critical("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    raise SystemExit(1)

bot = Bot(api_token=BOT_TOKEN)

# ---------------- –•–ï–õ–ü–ï–†–ò –í–Ü–î–ü–†–ê–í–ö–ò –∑ –†–ï–¢–†–ê–Ø–ú–ò ----------------
def is_blocked_error(e: Exception) -> bool:
    msg = getattr(e, "description", "") or str(e)
    return any(s in msg for s in (
        "bot was blocked by the user",
        "user is deactivated",
        "chat not found",
        "Forbidden: bot was blocked by the user",
    ))

async def retry_send(func, *args, **kwargs):
    max_attempts = kwargs.pop("_max_attempts", 5)
    base_sleep = kwargs.pop("_base_sleep", 0.8)
    for attempt in range(1, max_attempts + 1):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if is_blocked_error(e):
                raise
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ (—Å–ø—Ä–æ–±–∞ {attempt}/{max_attempts}): {e}")
            sleep_s = base_sleep * (2 ** (attempt - 1))
            await asyncio.sleep(min(sleep_s, 10))
    raise RuntimeError("–í–∏—á–µ—Ä–ø–∞–Ω–æ —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É Telegram")

# ---------------- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ----------------
@bot.command(r"/start(?:\s+(.+))?")
async def handle_start(chat: Chat, match):
    try:
        db_data = await read_db()
        if db_data is None:
            await retry_send(chat.send_text, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ë–î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        chat_id = chat.id
        active_user = find_user_by_chat_id(db_data, chat_id)
        activation_id = match.group(1) if match and match.group(1) else None

        if active_user and not activation_id:
            await retry_send(chat.send_text, f"üëã –í—ñ—Ç–∞—é, {active_user.get('nickname', '–¥—Ä—É–∂–µ')}! –í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–π.")
            return

        if not activation_id:
            await retry_send(chat.send_text, "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –≤–∞—à–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É.")
            return

        if active_user:
            await retry_send(chat.send_text, "–¶–µ–π Telegram –∞–∫–∞—É–Ω—Ç –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é. –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–¥.")
            return

        user_to_activate = None
        for user in db_data.get("users", []):
            binding = user.get("telegramBinding")
            if binding and binding.get("activationId") == activation_id and binding.get("status") == "pending":
                user_to_activate = user
                break

        if user_to_activate:
            binding = user_to_activate.setdefault("telegramBinding", {})
            binding["status"] = "active"
            binding["chatId"] = chat_id
            binding["username"] = (getattr(chat, "sender", {}) or {}).get("username")

            if await write_db(db_data):
                await retry_send(chat.send_text, f"‚úÖ –í—ñ—Ç–∞—é, {user_to_activate.get('nickname', '')}! –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_to_activate.get('nickname')} (ID: {user_to_activate.get('userId')}) –∞–∫—Ç–∏–≤—É–≤–∞–≤ –±–æ—Ç–∞.")
            else:
                await retry_send(chat.send_text, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await retry_send(chat.send_text, "‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.")
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ activation_id: {activation_id}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_start: {e}")

@bot.command(r".*")
async def handle_other_messages(chat: Chat, match):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {chat.id}")
    return

# ---------------- –í–ï–ë-–°–ï–†–í–ï–† ----------------
async def handle_notify(request: web.Request):
    auth_header = request.headers.get("Authorization")
    if not auth_header or auth_header != f"Bearer {API_SECRET}":
        logger.warning("–°–ø—Ä–æ–±–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ /notify")
        return web.Response(status=401, text="Unauthorized")

    try:
        data = await request.json()
    except Exception as e:
        # –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}. –†–æ–∑–º—ñ—Ä —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É: {request.content_length} –±–∞–π—Ç.")
        return web.Response(status=400, text="Bad Request: invalid or too large JSON")

    chat_id = data.get("chat_id")
    event_data = data.get("event_data")
    if not chat_id or not event_data:
        return web.Response(status=400, text="Bad Request: Missing chat_id or event_data")

    chat = Chat(bot, chat_id)
    event_type = event_data.get("type")
    
    try:
        if event_type == "photos":
            caption = (
                "üì∏ **–ù–æ–≤—ñ —Ñ–æ—Ç–æ!**\n\n"
                f"**–ü—Ä–∏—Å—Ç—Ä—ñ–π:** `{event_data.get('fingerprint','-')}`\n"
                f"**–ß–∞—Å:** `{event_data.get('collectedAt','-')}`"
            )
            for idx, photo_b64 in enumerate(event_data.get("data", [])[:10]):
                try:
                    payload = photo_b64.split(",", 1)[1] if "," in photo_b64 else photo_b64
                    photo_bytes = base64.b64decode(payload)
                    fh = BytesIO(photo_bytes)
                    await retry_send(
                        chat.send_photo,
                        photo=fh,
                        caption=caption if idx == 0 else None,
                        parse_mode="Markdown" if idx == 0 else None
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ #{idx}: {e}")
        
        elif event_type == "video":
            caption = (
                "üìπ **–ù–æ–≤–µ –≤—ñ–¥–µ–æ!**\n\n"
                f"**–ü—Ä–∏—Å—Ç—Ä—ñ–π:** `{event_data.get('fingerprint','-')}`\n"
                f"**–ß–∞—Å:** `{event_data.get('collectedAt','-')}`"
            )
            for idx, video_b64 in enumerate(event_data.get("data", [])[:10]):
                try:
                    payload = video_b64.split(",", 1)[1] if "," in video_b64 else video_b64
                    video_bytes = base64.b64decode(payload)
                    fh = BytesIO(video_bytes)
                    fh.name = f"video_{idx+1}.webm"
                    await retry_send(
                        chat.send_video,
                        video=fh,
                        caption=caption if idx == 0 else None,
                        parse_mode="Markdown" if idx == 0 else None
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ #{idx}: {e}")

        elif event_type == "location":
            lat = event_data.get("data", {}).get("latitude")
            lon = event_data.get("data", {}).get("longitude")
            if lat is None or lon is None:
                return web.Response(status=400, text="Bad Request: location payload invalid")
            maps_link = f"https://www.google.com/maps?q={lat},{lon}"
            message_text = (
                "üìç **–û—Ç—Ä–∏–º–∞–Ω–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é!**\n\n"
                f"**–ü—Ä–∏—Å—Ç—Ä—ñ–π:** `{event_data.get('fingerprint','-')}`\n"
                f"**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:** `{lat}, {lon}`\n\n"
                f"[–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ]({maps_link})"
            )
            await retry_send(chat.send_text, message_text, parse_mode="Markdown", disable_web_page_preview=True)

        elif event_type == "form":
            form_id = event_data.get("formId", "-")
            fields = "\n".join(
                [f"- **{key}:** `{value}`"
                 for key, value in (event_data.get("data") or {}).items()
                 if str(value).strip()]
            ) or "_(–ø–æ—Ä–æ–∂–Ω—å–æ)_"
            message_text = (
                f"üìù **–ó–∞–ø–æ–≤–Ω–µ–Ω–æ —Ñ–æ—Ä–º—É: '{form_id}'**\n\n"
                f"**–ü—Ä–∏—Å—Ç—Ä—ñ–π:** `{event_data.get('fingerprint','-')}`\n\n"
                f"{fields}"
            )
            await retry_send(chat.send_text, message_text, parse_mode="Markdown")
            
        elif event_type == "device_info":
            info_items = [f"- **{key}:** `{value}`" 
                          for key, value in (event_data.get("data") or {}).items()]
            info_text = "\n".join(info_items) or "_(–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö)_"
            message_text = (
                "‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π**\n\n"
                f"**–í—ñ–¥–±–∏—Ç–æ–∫ (FP):** `{event_data.get('fingerprint','-')}`\n"
                f"**–ß–∞—Å:** `{event_data.get('collectedAt','-')}`\n\n"
                f"{info_text}"
            )
            await retry_send(chat.send_text, message_text, parse_mode="Markdown")

        else:
            logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}. –î–∞–Ω—ñ: {event_data}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è chat_id {chat_id}: {e}")
        if is_blocked_error(e):
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞/—á–∞—Ç. –î–µ–∞–∫—Ç–∏–≤—É—é —É –ë–î...")
            db_data = await read_db()
            if db_data:
                user_to_deactivate = find_user_by_chat_id(db_data, chat_id)
                if user_to_deactivate and user_to_deactivate.get("telegramBinding", {}).get("status") != 'bot_blocked':
                    user_to_deactivate["telegramBinding"]["status"] = 'bot_blocked'
                    await write_db(db_data)
                    
    return web.Response(status=200, text="OK")

async def handle_health_check(request: web.Request):
    return web.Response(status=200, text="OK. Bot is running.")

# ---------------- KEEP-ALIVE ----------------
async def keep_alive():
    while True:
        try:
            await bot.get_me()
            logger.info("Ping –¥–æ Telegram —É—Å–ø—ñ—à–Ω–∏–π")
        except Exception as e:
            logger.warning(f"Ping –¥–æ Telegram –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è: {e}")
        await asyncio.sleep(300)

# ---------------- MAIN ----------------
async def main():
    # *** –û–°–ù–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢ ***
    # –ó–±—ñ–ª—å—à—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É –¥–æ 20 –ú–ë
    app = web.Application(client_max_size=20 * 1024 * 1024)
    
    app.router.add_post("/notify", handle_notify)
    app.router.add_get("/", handle_health_check)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    asyncio.create_task(keep_alive())
    await bot.loop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
